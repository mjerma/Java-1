/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Random;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Mihael
 */
public class EditMoviesPanel extends javax.swing.JPanel {

    private static final String FILENAME = "moviearchive.xml";
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private Repository repository;
    private MovieTableModel movieTableModel;
    
    private Movie selectedMovie;
    private JTextComponent selectedTextComponent;
    
    /**
     * Creates new form EditMoviesPanel
     */
    public EditMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbPicture = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lbTitle = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfDirector = new javax.swing.JTextField();
        lbDirector = new javax.swing.JLabel();
        tfActors = new javax.swing.JTextField();
        lbActors = new javax.swing.JLabel();
        lbDescription = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnEditActors = new javax.swing.JButton();
        btnChoose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        tfGenre = new javax.swing.JTextField();
        lbGenre = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        lbTitleError = new javax.swing.JLabel();
        lbActorsError = new javax.swing.JLabel();
        lbDirectorError = new javax.swing.JLabel();
        lbStartDateError = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lbLink = new javax.swing.JLabel();
        lbPublishedDate = new javax.swing.JLabel();
        lbOriginalTitleError = new javax.swing.JLabel();
        lbPublishedDateError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        lbOriginalTitle = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        tfDuration = new javax.swing.JTextField();
        lbDuration = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lbDescriptionError = new javax.swing.JLabel();
        lbPictureError = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        lbStartDate = new javax.swing.JLabel();
        lbPicturePath = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnSaveMovies = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1000, 750));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/maneSlike.jpg"))); // NOI18N
        lbPicture.setText("jLabel1");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        lbTitle.setText("Title:");

        tfTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditMoviesPanel.this.focusGained(evt);
            }
        });

        tfDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditMoviesPanel.this.focusGained(evt);
            }
        });

        lbDirector.setText("Director:");

        tfActors.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditMoviesPanel.this.focusGained(evt);
            }
        });

        lbActors.setText("Actors");

        lbDescription.setText("Description:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEditActors.setText("Edit Actors");
        btnEditActors.setEnabled(false);
        btnEditActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActorsActionPerformed(evt);
            }
        });

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        tfGenre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditMoviesPanel.this.focusGained(evt);
            }
        });

        lbGenre.setText("Genre");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbTitleError.setForeground(new java.awt.Color(204, 0, 0));

        lbActorsError.setForeground(new java.awt.Color(204, 0, 0));

        lbDirectorError.setForeground(new java.awt.Color(204, 0, 0));

        lbStartDateError.setForeground(new java.awt.Color(204, 0, 0));

        lbLink.setText("Link:");

        lbPublishedDate.setText("Published date:");

        lbOriginalTitleError.setForeground(new java.awt.Color(204, 0, 0));

        lbPublishedDateError.setForeground(new java.awt.Color(204, 0, 0));

        lbDurationError.setForeground(new java.awt.Color(204, 0, 0));

        lbLinkError.setForeground(new java.awt.Color(204, 0, 0));

        lbOriginalTitle.setText("Original title:");

        lbDuration.setText("Duration:");

        tfPublishedDate.setName("Date"); // NOI18N

        lbDescriptionError.setForeground(new java.awt.Color(204, 0, 0));

        lbPictureError.setForeground(new java.awt.Color(204, 0, 0));

        lbStartDate.setText("Start date:");

        lbPicturePath.setText("Picture path:");

        btnSaveMovies.setText("Save Movies");
        btnSaveMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditActors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)
                        .addComponent(lbPictureError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfActors, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChoose))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lbPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lbLink, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lbDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lbPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPicture)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbTitle)
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbDirector)
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbActors)
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbGenre)
                                    .addGap(10, 10, 10)
                                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbOriginalTitle)
                                        .addComponent(lbDescription))
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addComponent(lbDuration)
                                            .addGap(10, 10, 10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addComponent(lbPublishedDate)
                                            .addGap(10, 10, 10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addComponent(lbLink)
                                            .addGap(10, 10, 10)
                                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lbPictureError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPicturePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEditActors, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbStartDate)
                                .addGap(10, 10, 10)
                                .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        if (formValid()) {
            
            try {
                String localPicturePath = uploadPicture();
                
                Movie movie = new Movie(
                        tfTitle.getText().trim(), 
                        LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER), 
                        taDescription.getText().trim(), 
                        tfOriginalTitle.getText().trim(), 
                        MovieParser.handlePeople(tfDirector.getText().trim()), 
                        MovieParser.handlePeople(tfActors.getText().trim()), 
                        Integer.parseInt(tfDuration.getText().trim()),
                        tfGenre.getText().trim(),
                        localPicturePath,
                        tfLink.getText().trim(),
                        LocalDate.parse(tfStartDate.getText().trim(), DateTimeFormatter.ISO_DATE));
                
                repository.createMovie(movie);
                
                movieTableModel.setMovies(repository.selectMovies());
                
                clearForm();
                
            } catch (Exception e) {
                e.printStackTrace();
                MessageUtils.showErrorMessage("Error", "Unable to add movie");
            }
            
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie");
            return;
        }
        
        if (formValid()) {
            try {
                
                if (selectedMovie.getPicturePath() == null || !tfPicturePath.getText().trim().equals(selectedMovie.getPicturePath())) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPicturePath(localPicturePath);
                }
                
                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setDirectors(MovieParser.handlePeople(tfDirector.getText().trim()));
                selectedMovie.setActors(MovieParser.handlePeople(tfActors.getText().trim()));
                selectedMovie.setGenre(tfGenre.getText().trim());
                selectedMovie.setStartDate(LocalDate.parse(tfStartDate.getText().trim(), DateTimeFormatter.ISO_DATE));
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER));
                selectedMovie.setLink(tfLink.getText().trim());
                selectedMovie.setDescription(taDescription.getText().trim());
                
                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                
                movieTableModel.setMovies(repository.selectMovies());
                
                clearForm();

            } catch (Exception e) {
                e.printStackTrace();
                MessageUtils.showErrorMessage("Error", "Unable to update movie");
            }
        }
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie");
            return;
        }
        
        if (MessageUtils.showConfirmDialog("Delete movie", "Do you really want to delete?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repository.selectMovies());  
                clearForm();
            } catch (Exception e) {
                e.printStackTrace();
                MessageUtils.showErrorMessage("Error", "Unable to delete movie");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setPicture(lbPicture, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnEditActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActorsActionPerformed
        ActorDragAndDrop actorDragAndDrop = new ActorDragAndDrop(this,selectedMovie.getId());
        actorDragAndDrop.setVisible(true);
    }//GEN-LAST:event_btnEditActorsActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void focusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGained
        selectedTextComponent = (JTextComponent) evt.getSource();
        
    }//GEN-LAST:event_focusGained

    private void btnSaveMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMoviesActionPerformed
        try {
            JAXBUtils.save(new MovieArchive(repository.selectMovies()), FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (JAXBException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveMoviesActionPerformed

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEditActors;
    private javax.swing.JButton btnSaveMovies;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbActors;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescription;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirector;
    private javax.swing.JLabel lbDirectorError;
    private javax.swing.JLabel lbDuration;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenre;
    private javax.swing.JLabel lbLink;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitle;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JLabel lbPictureError;
    private javax.swing.JLabel lbPicturePath;
    private javax.swing.JLabel lbPublishedDate;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbStartDate;
    private javax.swing.JLabel lbStartDateError;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfActors;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        
        int selectedMovieId = (int)movieTableModel.getValueAt(tbMovies.getRowSorter().convertRowIndexToModel(selectedRow), 0);
        
        try {
            
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
                btnEditActors.setEnabled(true);
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            MessageUtils.showErrorMessage("Error", "Unable to load movie");
        }
        
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfGenre, tfPublishedDate, tfPicturePath, tfOriginalTitle, tfLink, tfActors, tfDuration, tfDirector, tfStartDate, taDescription);
        errorLabels = Arrays.asList(lbTitleError, lbActorsError, lbPublishedDateError, lbPictureError, lbOriginalTitleError, lbLinkError, lbActorsError, lbDurationError, 
                lbDirectorError, lbStartDateError, lbDescriptionError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(repository.selectMovies());
        tbMovies.setModel(movieTableModel);
    }

    private void setPicture(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (Exception e) {
            e.printStackTrace();
            MessageUtils.showErrorMessage("Error", "Unable to set picture");
        }
    }

    private boolean formValid() {
        boolean ok = true;
        
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
            
        }
        
        return ok;
    }

    private String uploadPicture() throws IOException {
        String pictureUrl = tfPicturePath.getText();
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(pictureUrl, localPicturePath);
        return localPicturePath;
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        
        lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/maneSlike.jpg"))); // NOI18N
        
        selectedMovie = null;
        
        btnEditActors.setEnabled(false);
    }

    private void fillForm(Movie movie) {
        
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfPicturePath.setText(movie.getPicturePath());
            setPicture(lbPicture, new File(movie.getPicturePath()));
        } else {
            lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/maneSlike.jpg"))); // NOI18N
            tfPicturePath.setText("");
        }
        
        tfTitle.setText(movie.getTitle());
        tfDirector.setText(personListToString(movie.getDirectors()));
        tfActors.setText(personListToString(movie.getActors()));
        tfGenre.setText(movie.getGenre());
        tfStartDate.setText(movie.getStartDate().format(DateTimeFormatter.ISO_DATE));
        tfOriginalTitle.setText(movie.getOriginalTitle());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfLink.setText(movie.getLink());
        taDescription.setText(movie.getDescription());
    }

    public static String personListToString(List<Person> list) {
       String listString = list.stream().map(Object::toString)
                        .collect(Collectors.joining(", ")); 
       return listString;
    }

}
